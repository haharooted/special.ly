{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport MapView, { Polygon, Marker } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useRoute } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar GEOJSON_URL = 'https://raw.githubusercontent.com/haharooted/test/main/events.geojson';\nvar GEOJSON_URL_DATABASE = 'localhost:3000';\nvar MapScreen = function MapScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    geoData = _useState2[0],\n    setGeoData = _useState2[1];\n  var route = useRoute();\n  var _ref = route.params || {},\n    _ref$latitude = _ref.latitude,\n    latitude = _ref$latitude === void 0 ? 55.67377240048718 : _ref$latitude,\n    _ref$longitude = _ref.longitude,\n    longitude = _ref$longitude === void 0 ? 12.541496086505862 : _ref$longitude;\n  useEffect(function () {\n    var _ref2;\n    var fetchGeoData = function fetchGeoData() {\n      return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(GEOJSON_URL);\n          var data = yield response.json();\n          setGeoData(data);\n        } catch (error) {\n          console.error('Error fetching GeoJSON data', error);\n        }\n      })).apply(this, arguments);\n    };\n    fetchGeoData();\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(MapView, {\n      style: styles.map,\n      initialRegion: {\n        latitude: latitude,\n        longitude: longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      children: geoData == null ? void 0 : geoData.features.map(function (feature, index) {\n        var geometry = feature.geometry,\n          properties = feature.properties;\n        var coordinates = geometry.coordinates;\n        if (geometry.type === 'Polygon') {\n          return _jsx(Polygon, {\n            coordinates: coordinates[0].map(function (coord) {\n              return {\n                latitude: coord[1],\n                longitude: coord[0]\n              };\n            }),\n            strokeColor: \"#000\",\n            fillColor: \"rgba(255,0,0,0.5)\",\n            strokeWidth: 1\n          }, index);\n        } else if (geometry.type === 'Point') {\n          return _jsx(Marker, {\n            coordinate: {\n              latitude: coordinates[1],\n              longitude: coordinates[0]\n            },\n            title: properties.name\n          }, index);\n        }\n        return null;\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  map: _objectSpread({}, StyleSheet.absoluteFillObject)\n});\nexport default MapScreen;","map":{"version":3,"names":["React","useEffect","useState","MapView","Polygon","Marker","StyleSheet","View","useRoute","jsx","_jsx","GEOJSON_URL","GEOJSON_URL_DATABASE","MapScreen","_useState","_useState2","_slicedToArray","geoData","setGeoData","route","_ref","params","_ref$latitude","latitude","_ref$longitude","longitude","_ref2","fetchGeoData","_asyncToGenerator","response","fetch","data","json","error","console","apply","arguments","style","styles","container","children","map","initialRegion","latitudeDelta","longitudeDelta","features","feature","index","geometry","properties","coordinates","type","coord","strokeColor","fillColor","strokeWidth","coordinate","title","name","create","flex","justifyContent","alignItems","_objectSpread","absoluteFillObject"],"sources":["/Users/jkatz/git/hvaskerder/app/screens/MapScreen.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MapView, { Polygon, Marker } from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\nimport { useRoute } from '@react-navigation/native';\n\nconst GEOJSON_URL = 'https://raw.githubusercontent.com/haharooted/test/main/events.geojson';\nconst GEOJSON_URL_DATABASE = 'localhost:3000'\n\nconst MapScreen = () => {\n  const [geoData, setGeoData] = useState(null);\n  const route = useRoute();\n  const { latitude = 55.67377240048718, longitude = 12.541496086505862 } = route.params || {};\n\n  useEffect(() => { //use effect hook til at init når der trykkes på tab\n    const fetchGeoData = async () => {\n      try {\n        const response = await fetch(GEOJSON_URL);\n        const data = await response.json();\n        setGeoData(data);\n      } catch (error) {\n        console.error('Error fetching GeoJSON data', error);\n      }\n    };\n\n    fetchGeoData();\n  }, []);\n\n  return ( // returner container med view i \n    <View style={styles.container}>\n      <MapView\n        style={styles.map}\n        initialRegion={{\n          latitude: latitude,\n          longitude: longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421,\n        }}\n      >\n        {geoData?.features.map((feature, index) => {\n          const { geometry, properties } = feature;\n          const { coordinates } = geometry;\n          if (geometry.type === 'Polygon') {\n            return (\n              <Polygon\n                key={index}\n                coordinates={coordinates[0].map(coord => ({ latitude: coord[1], longitude: coord[0] }))} // current koordinater\n                strokeColor=\"#000\"\n                fillColor=\"rgba(255,0,0,0.5)\"\n                strokeWidth={1}\n              />\n            );\n          } else if (geometry.type === 'Point') { // hvis det et punkt så tilføj det som \"Marker\"\n            return (\n              <Marker\n                key={index}\n                coordinate={{ latitude: coordinates[1], longitude: coordinates[0] }}\n                title={properties.name}\n              />\n            );\n          }\n          return null;\n        })}\n      </MapView>\n    </View>\n  );\n};\n\n// css styles\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  map: {\n    ...StyleSheet.absoluteFillObject,\n  },\n});\n\nexport default MapScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}